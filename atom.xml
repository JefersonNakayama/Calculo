<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Portifólio do Jef</title>
  
  
  <link href="https://jefersonnakayama.github.io/atom.xml" rel="self"/>
  
  <link href="https://jefersonnakayama.github.io/"/>
  <updated>2024-06-18T12:58:11.370Z</updated>
  <id>https://jefersonnakayama.github.io/</id>
  
  <author>
    <name>Jeferson Nakayama</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SelectionSort</title>
    <link href="https://jefersonnakayama.github.io/2024/06/18/SelectionSort/"/>
    <id>https://jefersonnakayama.github.io/2024/06/18/SelectionSort/</id>
    <published>2024-06-18T11:32:48.614Z</published>
    <updated>2024-06-18T12:58:11.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def selection_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + 1, n):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        try:</span><br><span class="line">            size = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> size &gt; 0:</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Por favor, insira um número inteiro positivo.&quot;</span>)</span><br><span class="line">        except ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Entrada inválida. Por favor, insira um número inteiro.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    arr = [random.randint(1, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array gerado:&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line">    start_time = time.perf_counter()</span><br><span class="line">    selection_sort(arr)</span><br><span class="line">    end_time = time.perf_counter()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;execution_time:.9f&#125; segundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Explicacao-do-Codigo"><a href="#Explicacao-do-Codigo" class="headerlink" title="Explicação do Código"></a>Explicação do Código</h1><h2 id="1-Importacoes-e-Definicao-de-Funcoes"><a href="#1-Importacoes-e-Definicao-de-Funcoes" class="headerlink" title="1. Importações e Definição de Funções"></a>1. Importações e Definição de Funções</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br></pre></td></tr></table></figure><p>Aqui, estamos importando dois módulos essenciais:</p><ul><li>random: Para gerar números aleatórios, útil para criar um array não ordenado.</li><li>time: Para medir o tempo de execução do algoritmo de ordenação.</li></ul><p>Em seguida, definimos a função selection_sort(arr) que implementa o algoritmo de Selection Sort.</p><h2 id="2-Funcao-‘selection-sort’"><a href="#2-Funcao-‘selection-sort’" class="headerlink" title="2. Função ‘selection_sort’"></a>2. Função ‘selection_sort’</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def selection_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + 1, n):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br></pre></td></tr></table></figure><p>Esta função recebe um array arr e ordena seus elementos em ordem crescente utilizando o algoritmo de Selection Sort. A ideia principal é iterar pelo array, encontrar o menor elemento não ordenado e trocá-lo com o elemento na posição atual (i).</p><h2 id="3-Funcao-‘main’"><a href="#3-Funcao-‘main’" class="headerlink" title="3. Função ‘main’"></a>3. Função ‘main’</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        try:</span><br><span class="line">            size = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> size &gt; 0:</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Por favor, insira um número inteiro positivo.&quot;</span>)</span><br><span class="line">        except ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Entrada inválida. Por favor, insira um número inteiro.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    arr = [random.randint(1, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array gerado:&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line">    start_time = time.perf_counter()</span><br><span class="line">    selection_sort(arr)</span><br><span class="line">    end_time = time.perf_counter()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;execution_time:.9f&#125; segundos&quot;</span>)</span><br></pre></td></tr></table></figure><p>A função main() é onde a execução principal do programa ocorre:</p><ul><li>Solicita ao usuário o tamanho do array;</li><li>Gera um array com números inteiros aleatórios entre 1 e 1000;</li><li>Mede o tempo de execução da função selection_sort() utilizando time.perf_counter();</li><li>Exibe o array original, o array ordenado e o tempo de execução da ordenação.</li></ul><h2 id="4-Execucao-do-Programa"><a href="#4-Execucao-do-Programa" class="headerlink" title="4. Execução do Programa"></a>4. Execução do Programa</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Esta parte do código verifica se o script está sendo executado diretamente (em oposição a ser importado como um módulo). Se for o caso, chama a função main() para iniciar a execução do programa.</p><h2 id="5-Uso-em-Praticas-de-Calculo"><a href="#5-Uso-em-Praticas-de-Calculo" class="headerlink" title="5. Uso em Práticas de Cálculo"></a>5. Uso em Práticas de Cálculo</h2><p>O algoritmo de Selection Sort, embora simples, é útil em diversas práticas de cálculo e análise de algoritmos:</p><ul><li>Análise de Complexidade: O Selection Sort é um exemplo de um algoritmo de ordenação com complexidade O(n^2) no pior caso, o que o torna interessante para comparar com algoritmos mais eficientes, como Merge Sort ou Quick Sort;</li><li>Ensino de Algoritmos: É frequentemente utilizado para ensinar conceitos fundamentais de algoritmos de ordenação, como iteração sobre arrays e troca de elementos;</li><li>Aplicações em Pesquisa Operacional: Em problemas de otimização simples, onde o tamanho do conjunto de dados não é muito grande, o Selection Sort pode ser uma escolha viável;</li><li>Testes de Performance: É útil para testar o desempenho de hardware ou ambientes de execução, devido à sua simplicidade e previsibilidade no tempo de execução;</li></ul><p>No entanto, em aplicações do mundo real onde a eficiência é crucial, como grandes volumes de dados ou sistemas críticos de tempo real, algoritmos como Merge Sort ou Quick Sort são preferíveis devido à sua complexidade assintótica inferior (O(n log n)).</p><p>Em resumo, o código fornecido exemplifica um algoritmo simples de ordenação (Selection Sort) e demonstra como medir o tempo de execução em Python, sendo útil tanto para aprendizado e ensino quanto para aplicações práticas onde a eficiência não é a maior preocupação.</p><p>A tabela na imagem apresenta os tempos de execução do algoritmo Selection Sort para diferentes quantidades de dados. O algoritmo Selection Sort é um algoritmo de ordenação simples e eficiente que funciona da seguinte maneira:</p><img src="/Tarefa_Calculo/2024/06/18/SelectionSort/selection.png" class=""><p>Clique <a href="https://docs.google.com/spreadsheets/d/1Dr9dI_5-JOhWOhHmyAupBB079QXvYXREuRlSswNGwN8/edit?usp=sharing">Aqui</a> para acessar a tabela!</p><ul><li>Selecione o menor elemento na lista não ordenada;</li><li>Troque o menor elemento pelo primeiro elemento da lista não ordenada;</li><li>Repita os passos 1 e 2 até que todos os elementos da lista estejam ordenados;</li><li>A busca binária não é utilizada diretamente no algoritmo Selection Sort. No entanto, a tabela na imagem pode ser obtida usando uma combinação de Selection Sort e uma técnica de busca similar à busca binária;</li></ul><h2 id="6-Tecnica-de-busca-para-obter-os-dados-da-tabela"><a href="#6-Tecnica-de-busca-para-obter-os-dados-da-tabela" class="headerlink" title="6. Técnica de busca para obter os dados da tabela"></a>6. Técnica de busca para obter os dados da tabela</h2><ul><li>Crie uma lista vazia para armazenar os tempos de execução.</li><li>Ordene a lista de dados em ordem crescente usando o algoritmo Selection Sort.</li></ul><h4 id="6-1-Para-cada-quantidade-de-dados"><a href="#6-1-Para-cada-quantidade-de-dados" class="headerlink" title="6.1 Para cada quantidade de dados"></a>6.1 Para cada quantidade de dados</h4><ul><li>Execute o algoritmo Selection Sort para a lista de dados ordenada;</li><li>Meça o tempo de execução do algoritmo;</li><li>Adicione o tempo de execução à lista vazia;</li></ul><h4 id="Repita-o-passo-3-para-todas-as-quantidades-de-dados-desejadas"><a href="#Repita-o-passo-3-para-todas-as-quantidades-de-dados-desejadas" class="headerlink" title="Repita o passo 3 para todas as quantidades de dados desejadas."></a>Repita o passo 3 para todas as quantidades de dados desejadas.</h4><h2 id="7-Explicacao-passo-a-passo"><a href="#7-Explicacao-passo-a-passo" class="headerlink" title="7.Explicação passo a passo"></a>7.Explicação passo a passo</h2><ul><li>Criação da lista vazia: A lista vazia será usada para armazenar os tempos de execução do algoritmo Selection Sort para cada quantidade de dados;</li><li>Ordenação da lista de dados: A lista de dados é ordenada em ordem crescente usando o algoritmo Selection Sort. Isso garante que os dados estejam em uma ordem específica, o que facilita a busca eficiente pelos tempos de execução;</li><li>Execução do algoritmo e medição do tempo: Para cada quantidade de dados, o algoritmo Selection Sort é executado na lista de dados ordenada. O tempo de execução do algoritmo é medido e armazenado na lista vazia;</li><li>Repetição: O passo 3 é repetido para todas as quantidades de dados desejadas. Isso garante que os tempos de execução sejam coletados para uma variedade de tamanhos de lista.</li></ul><p>A técnica de busca descrita acima não é uma busca binária clássica, mas utiliza uma ideia similar de busca eficiente para obter os tempos de execução do algoritmo Selection Sort.</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>A tabela na imagem apresenta os tempos de execução do algoritmo Selection Sort para diferentes quantidades de dados. A tabela pode ser obtida usando uma combinação de Selection Sort e uma técnica de busca similar à busca binária. A técnica de busca descrita permite obter os tempos de execução de maneira eficiente, mesmo para grandes quantidades de dados.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Selection-Sort&quot;&gt;&lt;a href=&quot;#Selection-Sort&quot; class=&quot;headerlink&quot; title=&quot;Selection Sort&quot;&gt;&lt;/a&gt;Selection Sort&lt;/h1&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MergeSort</title>
    <link href="https://jefersonnakayama.github.io/2024/06/18/MergeSort/"/>
    <id>https://jefersonnakayama.github.io/2024/06/18/MergeSort/</id>
    <published>2024-06-18T11:32:48.612Z</published>
    <updated>2024-06-18T12:59:13.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def merge_sort(arr):</span><br><span class="line">    <span class="keyword">if</span> len(arr) &gt; 1:</span><br><span class="line">        mid = len(arr) // 2</span><br><span class="line">        L = arr[:mid]</span><br><span class="line">        R = arr[mid:]</span><br><span class="line"></span><br><span class="line">        merge_sort(L)</span><br><span class="line">        merge_sort(R)</span><br><span class="line"></span><br><span class="line">        i = j = k = 0</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(L) and j &lt; len(R):</span><br><span class="line">            <span class="keyword">if</span> L[i] &lt; R[j]:</span><br><span class="line">                arr[k] = L[i]</span><br><span class="line">                i += 1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                arr[k] = R[j]</span><br><span class="line">                j += 1</span><br><span class="line">            k += 1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(L):</span><br><span class="line">            arr[k] = L[i]</span><br><span class="line">            i += 1</span><br><span class="line">            k += 1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &lt; len(R):</span><br><span class="line">            arr[k] = R[j]</span><br><span class="line">            j += 1</span><br><span class="line">            k += 1</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    n = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line"></span><br><span class="line">    arr = [random.randint(0, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array original:&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    merge_sort(arr)</span><br><span class="line">    end_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;end_time - start_time:.6f&#125; segundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-Explicacao-do-Codigo"><a href="#1-Explicacao-do-Codigo" class="headerlink" title="1. Explicação do Código"></a>1. Explicação do Código</h2><h3 id="1-1-Importacao-de-Modulos"><a href="#1-1-Importacao-de-Modulos" class="headerlink" title="1.1 Importação de Módulos:"></a>1.1 Importação de Módulos:</h3><p>‘random’ para gerar números aleatórios;<br>‘time’ para calcular o tempo de execução.</p><h3 id="1-2-Funcao-‘main’"><a href="#1-2-Funcao-‘main’" class="headerlink" title="1.2. Função ‘main’:"></a>1.2. Função ‘main’:</h3><p>Solicita ao usuário o tamanho do array;<br>Gera um array com valores aleatórios entre 0 e 1000;<br>Exibe o array original;<br>Calcula e exibe o tempo de execução do Merge Sort;<br>Exibe o array ordenado.</p><h3 id="1-3-Funcao-merge-sort"><a href="#1-3-Funcao-merge-sort" class="headerlink" title="1.3. Função merge_sort:"></a>1.3. Função merge_sort:</h3><p>Esta função implementa o algoritmo Merge Sort, que é um algoritmo de ordenação recursivo;<br>Divisão: A lista é dividida em duas metades;<br>Conquista: Cada metade é ordenada recursivamente;<br>Combinação: As duas metades ordenadas são combinadas em uma lista ordenada única;<br>Durante a combinação, elementos das duas metades são comparados e mesclados na ordem correta.</p><h2 id="2-Uso-Pratico-do-Codigo-em-Calculos"><a href="#2-Uso-Pratico-do-Codigo-em-Calculos" class="headerlink" title="2. Uso Prático do Código em Cálculos"></a>2. Uso Prático do Código em Cálculos</h2><p>Este código pode ser útil em diversas práticas de cálculo, principalmente em análise de algoritmos e eficiência computacional.</p><h3 id="2-1-Analise-de-Algoritmos"><a href="#2-1-Analise-de-Algoritmos" class="headerlink" title="2.1. Análise de Algoritmos:"></a>2.1. Análise de Algoritmos:</h3><ul><li>Complexidade Temporal: Merge Sort tem uma complexidade temporal de 𝑂(𝑛log⁡𝑛);</li><li>Este código pode ser usado para demonstrar e analisar a eficiência de Merge Sort em comparação com outros algoritmos de ordenação, como Bubble Sort (𝑂(𝑛2)O(n 2 )) ou Quick Sort (𝑂(𝑛log𝑛)O(nlogn)em média);</li><li>Comparação Prática: Ao variar o tamanho do array, você pode observar como o tempo de execução muda, ajudando a entender a teoria na prática.</li></ul><h3 id="2-2-Desempenho-de-Sistemas"><a href="#2-2-Desempenho-de-Sistemas" class="headerlink" title="2.2. Desempenho de Sistemas:"></a>2.2. Desempenho de Sistemas:</h3><ul><li>Benchmarking: O código pode ser usado para avaliar o desempenho de diferentes sistemas (e.g., CPUs, ambientes de execução) ao ordenar grandes volumes de dados;</li><li>Otimização: Analisar se modificações no código ou configurações do sistema podem melhorar o desempenho do algoritmo.</li></ul><h3 id="2-3-Aplicacoes-em-Big-Data"><a href="#2-3-Aplicacoes-em-Big-Data" class="headerlink" title="2.3 Aplicações em Big Data:"></a>2.3 Aplicações em Big Data:</h3><ul><li>Preparação de Dados: Ordenar grandes conjuntos de dados é uma tarefa comum em análise de dados e machine learning. Merge Sort é adequado para ordenação de grandes volumes de dados, especialmente quando implementado em ambientes distribuídos;</li><li>Estudos de Caso: Utilizando dados reais ou simulados, você pode demonstrar a eficiência de Merge Sort para preparar dados para outras operações analíticas.</li></ul><h2 id="3-Compreensao-de-Algoritmos-de-Ordenacao"><a href="#3-Compreensao-de-Algoritmos-de-Ordenacao" class="headerlink" title="3. Compreensão de Algoritmos de Ordenação"></a>3. Compreensão de Algoritmos de Ordenação</h2><ul><li>Teoria vs. Prática: Entender como um algoritmo de ordenação funciona teoricamente e ver sua implementação prática ajuda a consolidar o conhecimento. Merge Sort é um excelente exemplo por sua eficiência e abordagem recursiva.</li><li>Complexidade Computacional: A prática com o código mostra a diferença de complexidade temporal entre Merge Sort (𝑂(𝑛log𝑛)) e outros algoritmos como Bubble Sort (𝑂(𝑛2)O(n 2)). Isso é essencial para entender a importância de escolher o algoritmo certo para problemas de grande escala.</li></ul><h2 id="4-Analise-de-Desempenho"><a href="#4-Analise-de-Desempenho" class="headerlink" title="4. Análise de Desempenho"></a>4. Análise de Desempenho</h2><ul><li>Benchmarking: Rodar o código para arrays de diferentes tamanhos permite entender como o desempenho de Merge Sort se comporta na prática. Isso pode incluir a medição do tempo de execução e o uso de recursos como memória.</li><li>Eficiência em Diferentes Contextos: Comparar o desempenho em diferentes máquinas ou ambientes de execução (e.g., local vs. nuvem) ajuda a entender como o hardware e o ambiente afetam a eficiência dos algoritmos.</li></ul><h2 id="5-Aplicacao-em-Ciencia-de-Dados"><a href="#5-Aplicacao-em-Ciencia-de-Dados" class="headerlink" title="5. Aplicação em Ciência de Dados"></a>5. Aplicação em Ciência de Dados</h2><ul><li>Preparação de Dados: Ordenação é uma etapa crucial em muitas tarefas de ciência de dados e aprendizado de máquina. Compreender a eficiência de Merge Sort em grandes conjuntos de dados pode ajudar na escolha de métodos para preparação e limpeza de dados.</li><li>Manipulação de Dados em Tempo Real: Ver como Merge Sort lida com grandes volumes de dados pode ser diretamente aplicável a sistemas que precisam processar dados em tempo real ou quase real.</li></ul><h2 id="6-Exploracao-de-Estruturas-de-Dados-e-Algoritmos-Avancados"><a href="#6-Exploracao-de-Estruturas-de-Dados-e-Algoritmos-Avancados" class="headerlink" title="6. Exploração de Estruturas de Dados e Algoritmos Avançados"></a>6. Exploração de Estruturas de Dados e Algoritmos Avançados</h2><ul><li>Estruturas de Dados Relacionadas: Estudar Merge Sort pode levar a explorar outras estruturas de dados e algoritmos relacionados, como árvores binárias, heaps e algoritmos de divisão e conquista.</li><li>Recursividade e Divisão e Conquista: Merge Sort é um exemplo clássico de algoritmos recursivos e de divisão e conquista, fornecendo uma base sólida para entender outros algoritmos que usam técnicas semelhantes.</li></ul><h2 id="7-Visualizacao-de-Dados-e-Resultados"><a href="#7-Visualizacao-de-Dados-e-Resultados" class="headerlink" title="7.  Visualização de Dados e Resultados"></a>7.  Visualização de Dados e Resultados</h2><ul><li>Plotagem e Análise de Resultados: Utilizar bibliotecas como Matplotlib para plotar gráficos de desempenho (tempo vs. tamanho do array) ajuda a visualizar a eficiência do algoritmo e a interpretar os resultados de forma mais intuitiva.</li><li>Gráficos Log-Log: Entender gráficos log-log e sua importância na análise de complexidade de algoritmos fornece uma ferramenta poderosa para análise de desempenho.</li></ul><p>A tabela na imagem apresenta os tempos de execução do algoritmo Merge Sort para diferentes quantidades de dados (“Qtd. Dados”). Os dados foram obtidos através de experimentos práticos, executando o algoritmo em um computador e medindo o tempo necessário para ordenar cada conjunto de dados.</p><img src="/Tarefa_Calculo/2024/06/18/MergeSort/merge.png" class=""><p>Clique <a href="https://docs.google.com/spreadsheets/d/1Dr9dI_5-JOhWOhHmyAupBB079QXvYXREuRlSswNGwN8/edit?usp=sharing">Aqui</a> !, para acessar os arquivos.</p><p>O algoritmo Merge Sort é um algoritmo de ordenação eficiente e ele funciona da seguinte forma:</p><ul><li>Dividir: O conjunto de dados original é dividido em dois subconjuntos de tamanho aproximadamente igual.</li></ul><p>A etapa de combinação é realizada utilizando a técnica de busca binária. A busca binária é um algoritmo de busca eficiente que funciona da seguinte forma:</p><ul><li>Escolher um elemento central: Um elemento central é escolhido no subconjunto ordenado;</li><li>Comparar o elemento central com a chave de busca: A chave de busca é comparada com o elemento central;</li><li>Se a chave de busca for menor que o elemento central: A busca continua no subconjunto à esquerda do elemento central;</li><li>Se a chave de busca for maior que o elemento central: A busca continua no subconjunto à direita do elemento central;</li><li>Se a chave de busca for igual ao elemento central: A chave de busca foi encontrada.</li></ul><p>A tabela na imagem mostra o tempo de execução do algoritmo Merge Sort em segundos para diferentes quantidades de dados. Os dados indicam que o tempo de execução do algoritmo aumenta logaritmicamente com o número de dados. Isso significa que o tempo de execução do algoritmo cresce a um ritmo cada vez mais lento à medida que o número de dados aumenta.</p><p>A relação entre o tempo de execução do algoritmo Merge Sort e o número de dados pode ser expressa pela seguinte equação:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(n) = O(n <span class="built_in">log</span> n)</span><br></pre></td></tr></table></figure><p>Onde:</p><ul><li>T(n) é o tempo de execução do algoritmo para n dados;</li><li>O(n log n) é a notação Big O, que indica que o tempo de execução do algoritmo cresce logaritmicamente com o número de dados.</li><li>A notação Big O é uma maneira de expressar o tempo de execução assintótico de um algoritmo. O tempo de execução assintótico é o tempo de execução do algoritmo para grandes valores de n.</li></ul><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>A obtenção dos dados na tabela do Merge Sort é feita através de experimentos práticos. Os dados indicam que o tempo de execução do algoritmo aumenta logaritmicamente com o número de dados. Isso significa que o Merge Sort é um algoritmo de ordenação eficiente que pode ser usado para ordenar grandes conjuntos de dados com um tempo de execução razoável.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Merge-Sort&quot;&gt;&lt;a href=&quot;#Merge-Sort&quot; class=&quot;headerlink&quot; title=&quot;Merge Sort&quot;&gt;&lt;/a&gt;Merge Sort&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>InsertionSort</title>
    <link href="https://jefersonnakayama.github.io/2024/06/18/InserctionSort/"/>
    <id>https://jefersonnakayama.github.io/2024/06/18/InserctionSort/</id>
    <published>2024-06-18T11:32:48.611Z</published>
    <updated>2024-06-18T12:56:49.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def insertion_sort(arr):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1, len(arr)):</span><br><span class="line">        key = arr[i]</span><br><span class="line">        j = i - 1</span><br><span class="line">        <span class="keyword">while</span> j &gt;= 0 and key &lt; arr[j]:</span><br><span class="line">            arr(j + 1) = arr[j]</span><br><span class="line">            j -= 1</span><br><span class="line">        arr(j + 1) = key</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        n = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">        arr = [random.randint(0, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Array gerado:&quot;</span>, arr)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        insertion_sort(arr)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = end_time - start_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;execution_time:.9f&#125; segundos&quot;</span>)</span><br><span class="line">    except ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Por favor, insira um número inteiro válido.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-Explicacao-do-Codigo"><a href="#1-Explicacao-do-Codigo" class="headerlink" title="1. Explicação do Código"></a>1. Explicação do Código</h2><h3 id="1-1-Importacoes"><a href="#1-1-Importacoes" class="headerlink" title="1.1 Importações"></a>1.1 Importações</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br></pre></td></tr></table></figure><ul><li>‘random’: Usado para gerar números aleatórios;</li><li>‘time’: Usado para medir o tempo de execução.</li></ul><h3 id="1-2-Funcao-insertion-sort-arr"><a href="#1-2-Funcao-insertion-sort-arr" class="headerlink" title="1.2 Função insertion_sort(arr)"></a>1.2 Função insertion_sort(arr)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def insertion_sort(arr):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1, len(arr)):</span><br><span class="line">        key = arr[i]</span><br><span class="line">        j = i - 1</span><br><span class="line">        <span class="keyword">while</span> j &gt;= 0 and key &lt; arr[j]:</span><br><span class="line">            arr[j + 1] = arr[j]</span><br><span class="line">            j -= 1</span><br><span class="line">        arr[j + 1] = key</span><br></pre></td></tr></table></figure><ul><li>Implementa o algoritmo de Insertion Sort;</li><li>Percorre o array começando do segundo elemento até o final;</li><li>Para cada elemento, compara-o com os elementos anteriores e os desloca para a direita até encontrar a posição correta para o elemento atual (key).</li></ul><h3 id="1-3-Funcao-main"><a href="#1-3-Funcao-main" class="headerlink" title="1.3 Função main()"></a>1.3 Função main()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        n = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">        arr = [random.randint(0, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Array gerado:&quot;</span>, arr)</span><br><span class="line">        </span><br><span class="line">        start_time = time.time()</span><br><span class="line">        insertion_sort(arr)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        </span><br><span class="line">        execution_time = end_time - start_time</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;execution_time:.9f&#125; segundos&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    except ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Por favor, insira um número inteiro válido.&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>Solicita ao usuário o tamanho do array;</li><li>Gera um array de tamanho n com valores aleatórios entre 0 e 1000;</li><li>Imprime o array gerado;</li><li>Mede o tempo antes e depois da execução do insertion_sort para calcular o tempo de execução;</li><li>Imprime o array ordenado e o tempo de execução;</li><li>Captura exceções se o usuário não fornecer um número inteiro válido.</li></ul><h3 id="1-4-Chamada-da-funcao-main"><a href="#1-4-Chamada-da-funcao-main" class="headerlink" title="1.4 Chamada da função main()"></a>1.4 Chamada da função main()</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>Garante que o script execute a função main() quando executado diretamente.</li></ul><h2 id="2-Uso-em-Praticas-de-Calculo"><a href="#2-Uso-em-Praticas-de-Calculo" class="headerlink" title="2. Uso em Práticas de Cálculo"></a>2. Uso em Práticas de Cálculo</h2><p>O código pode ser útil em várias práticas de cálculo, especialmente em contextos de ensino e aprendizado de algoritmos e complexidade de tempo:</p><h3 id="2-1-Educacao-em-Algoritmos"><a href="#2-1-Educacao-em-Algoritmos" class="headerlink" title="2.1 Educação em Algoritmos"></a>2.1 Educação em Algoritmos</h3><ul><li>Análise de Desempenho: Permite aos alunos observar como o tempo de execução do Insertion Sort varia com o tamanho do array. Isso pode ser usado para discutir a complexidade de tempo O(n²) do Insertion Sort;</li><li>Comparação com Outros Algoritmos: Pode ser comparado com outros algoritmos de ordenação, como Quick Sort ou Merge Sort, para entender diferenças de desempenho.</li></ul><h3 id="2-2-Benchmarking"><a href="#2-2-Benchmarking" class="headerlink" title="2.2 Benchmarking"></a>2.2 Benchmarking</h3><ul><li>Desempenho de Software: Pode ser usado para medir o desempenho de diferentes implementações de algoritmos de ordenação;</li><li>Análise Empírica: Auxilia na coleta de dados empíricos sobre o tempo de execução real dos algoritmos, que pode ser usado para validar análises teóricas.</li></ul><h3 id="2-3-Simulacoes-e-Experimentos"><a href="#2-3-Simulacoes-e-Experimentos" class="headerlink" title="2.3 Simulações e Experimentos"></a>2.3 Simulações e Experimentos</h3><ul><li>Experimentos com Dados Reais: Pode ser modificado para ordenar dados reais e medir o tempo de execução em cenários práticos;</li><li>Estudo de Comportamento em Casos Específicos: Investigação de como o algoritmo se comporta com diferentes tipos de dados (por exemplo, dados quase ordenados, dados em ordem inversa, etc.).</li></ul><h2 id="3-Exemplo-de-Uso"><a href="#3-Exemplo-de-Uso" class="headerlink" title="3. Exemplo de Uso"></a>3. Exemplo de Uso</h2><p>Suponha que você deseja entender como o Insertion Sort se comporta com arrays de tamanhos diferentes. Você pode usar este script para gerar arrays de tamanhos variados e medir o tempo de execução para cada um, registrando os resultados para análise posterior. Isso pode fornecer insights sobre quando o Insertion Sort é eficiente e quando não é, ajudando na escolha do algoritmo de ordenação apropriado para diferentes aplicações.</p><p>A tabela na imagem apresenta a relação entre a quantidade de dados (Qtd. Dados) e o tempo de execução (em segundos) do algoritmo Insertion Sort com busca binária. Para entendermos como esses dados foram obtidos, vamos analisar o funcionamento do algoritmo e sua relação com a busca binária.</p><img src="/Tarefa_Calculo/2024/06/18/InserctionSort/insertion.png" class=""><p>Clique <a href="https://docs.google.com/spreadsheets/d/1Dr9dI_5-JOhWOhHmyAupBB079QXvYXREuRlSswNGwN8/edit?usp=sharing">Aqui</a> para acessar as tabelas!</p><p>O Insertion Sort é um algoritmo de ordenação que funciona da seguinte maneira:</p><ul><li>Inicialização: A lista a ser ordenada é considerada como parcialmente ordenada, com o primeiro elemento já na sua posição correta.</li><li>Inserção: Para cada elemento subsequente da lista, ele é inserido na sua posição correta na parte já ordenada da lista. Isso é feito comparando o elemento com os elementos da parte ordenada e movendo os elementos necessários para abrir espaço para o novo elemento.</li><li>Repetição: O processo de inserção é repetido para todos os elementos da lista até que todos estejam na sua posição correta.</li></ul><h2 id="4-Busca-binaria"><a href="#4-Busca-binaria" class="headerlink" title="4. Busca binária"></a>4. Busca binária</h2><p>A busca binária é um algoritmo de busca eficiente que funciona em listas ordenadas. Ele divide a lista em metades repetidamente até encontrar o elemento desejado ou determinar que ele não está na lista.</p><h2 id="5-Insertion-Sort-com-busca-binaria"><a href="#5-Insertion-Sort-com-busca-binaria" class="headerlink" title="5. Insertion Sort com busca binária"></a>5. Insertion Sort com busca binária</h2><p>O Insertion Sort com busca binária combina os dois algoritmos para melhorar o desempenho do Insertion Sort em listas grandes. A busca binária é utilizada para encontrar a posição correta de inserção de cada elemento na lista ordenada, reduzindo o número de comparações necessárias em comparação com o Insertion Sort tradicional.</p><h2 id="6-Obtendo-os-dados-da-tabela"><a href="#6-Obtendo-os-dados-da-tabela" class="headerlink" title="6. Obtendo os dados da tabela"></a>6. Obtendo os dados da tabela</h2><p>Para obter os dados da tabela, o algoritmo Insertion Sort com busca binária foi executado com diferentes quantidades de dados (Qtd. Dados). O tempo de execução do algoritmo para cada quantidade de dados foi medido e registrado na tabela.</p><h2 id="7-Analise-dos-dados"><a href="#7-Analise-dos-dados" class="headerlink" title="7. Análise dos dados"></a>7. Análise dos dados</h2><p>A tabela mostra que o tempo de execução do algoritmo aumenta à medida que a quantidade de dados aumenta. Isso ocorre porque o algoritmo precisa realizar mais comparações e operações de inserção para ordenar listas maiores.</p><p>A curva na tabela indica que o tempo de execução cresce exponencialmente com a quantidade de dados. Isso significa que o aumento do tempo de execução se torna cada vez mais significativo à medida que a quantidade de dados aumenta.</p><h2 id="8-Fatores-que-influenciam-o-tempo-de-execucao"><a href="#8-Fatores-que-influenciam-o-tempo-de-execucao" class="headerlink" title="8. Fatores que influenciam o tempo de execução"></a>8. Fatores que influenciam o tempo de execução</h2><p>O tempo de execução do Insertion Sort com busca binária pode ser influenciado por alguns fatores, como:</p><ul><li>Tamanho da lista: Quanto maior a lista, mais tempo o algoritmo levará para ordená-la.<br>Distribuição dos dados: Se os dados estiverem distribuídos aleatoriamente, o algoritmo levará mais tempo para ordená-los do que se estiverem parcialmente ordenados.</li><li>Implementação do algoritmo: A eficiência da implementação do algoritmo pode afetar o tempo de execução.</li></ul><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>A tabela apresenta dados sobre o tempo de execução do algoritmo Insertion Sort com busca binária para diferentes quantidades de dados. A análise dos dados mostra que o tempo de execução do algoritmo aumenta exponencialmente com a quantidade de dados. O algoritmo pode ser influenciado por diversos fatores, como o tamanho da lista, a distribuição dos dados e a implementação do algoritmo.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Insertion-Sort&quot;&gt;&lt;a href=&quot;#Insertion-Sort&quot; class=&quot;headerlink&quot; title=&quot;Insertion Sort&quot;&gt;&lt;/a&gt;Insertion Sort&lt;/h1&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BubbleSort</title>
    <link href="https://jefersonnakayama.github.io/2024/06/18/BubbleSort/"/>
    <id>https://jefersonnakayama.github.io/2024/06/18/BubbleSort/</id>
    <published>2024-06-18T11:32:48.609Z</published>
    <updated>2024-06-18T12:59:46.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def bubble_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(0, n-i-1):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+1]:</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    tamanho = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">    array = [random.randint(1, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(tamanho)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array original:&quot;</span>, array)</span><br><span class="line">    inicio = time.time()</span><br><span class="line">    bubble_sort(array)</span><br><span class="line">    fim = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, array)</span><br><span class="line">    tempo_execucao = fim - inicio</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;tempo_execucao:.9f&#125; segundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-Explicacao-do-Codigo"><a href="#1-Explicacao-do-Codigo" class="headerlink" title="1. Explicação do Código:"></a>1. Explicação do Código:</h2><h3 id="1-1-Importacoes-e-Funcao-Bubble-Sort"><a href="#1-1-Importacoes-e-Funcao-Bubble-Sort" class="headerlink" title="1.1 Importações e Função Bubble Sort:"></a>1.1 Importações e Função Bubble Sort:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br></pre></td></tr></table></figure><ul><li>random: Biblioteca para gerar números aleatórios.</li><li>time: Biblioteca para medir o tempo de execução.<br>A função bubble_sort(arr) implementa o algoritmo de ordenação Bubble Sort. Este algoritmo compara pares de elementos adjacentes no array e os troca se estiverem na ordem errada. Esse processo é repetido várias vezes até que o array esteja ordenado.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def bubble_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(0, n-i-1):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+1]:</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br></pre></td></tr></table></figure><ul><li>n &#x3D; len(arr): Obtém o tamanho do array arr;</li><li>Os loops for i in range(n) e for j in range(0, n-i-1) percorrem o array e comparam elementos adjacentes;</li><li>Se um elemento é maior que o próximo (arr[j] &gt; arr[j+1]), eles são trocados.</li></ul><h3 id="1-2-Funcao-Principal-main"><a href="#1-2-Funcao-Principal-main" class="headerlink" title="1.2 Função Principal main():"></a>1.2 Função Principal main():</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    tamanho = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">    array = [random.randint(1, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(tamanho)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array original:&quot;</span>, array)</span><br><span class="line">    inicio = time.time()</span><br><span class="line">    bubble_sort(array)</span><br><span class="line">    fim = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, array)</span><br><span class="line">    tempo_execucao = fim - inicio</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;tempo_execucao:.9f&#125; segundos&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>tamanho &#x3D; int(input(“Digite o tamanho do array: “)): Solicita ao usuário o tamanho desejado para o array;</li><li>array &#x3D; [random.randint(1, 1000) for _ in range(tamanho)]: Gera um array de tamanho tamanho com valores inteiros aleatórios entre 1 e 1000;</li><li>Imprime o array original;</li><li>inicio &#x3D; time.time(): Marca o tempo antes de chamar bubble_sort;</li><li>bubble_sort(array): Ordena o array utilizando o Bubble Sort;</li><li>fim &#x3D; time.time(): Marca o tempo após a ordenação;</li><li>Imprime o array ordenado;</li><li>Calcula e imprime o tempo de execução da ordenação com precisão de 9 casas decimais.</li></ul><h2 id="2-Uso-em-Praticas-em-Calculo"><a href="#2-Uso-em-Praticas-em-Calculo" class="headerlink" title="2. Uso em Práticas em Cálculo:"></a>2. Uso em Práticas em Cálculo:</h2><p>Este código pode ser útil em práticas de cálculo em várias situações:</p><h3 id="2-1-Analise-de-Desempenho-de-Algoritmos"><a href="#2-1-Analise-de-Desempenho-de-Algoritmos" class="headerlink" title="2.1 Análise de Desempenho de Algoritmos"></a>2.1 Análise de Desempenho de Algoritmos</h3><p>Medir o tempo de execução de algoritmos de ordenação como o Bubble Sort é fundamental para comparar sua eficiência com outros algoritmos (como o Merge Sort, Quick Sort, etc.) em diferentes conjuntos de dados.</p><h3 id="2-2-Exercicios-de-Programacao"><a href="#2-2-Exercicios-de-Programacao" class="headerlink" title="2.2 Exercícios de Programação:"></a>2.2 Exercícios de Programação:</h3><p>Em cursos de cálculo computacional, alunos podem implementar e analisar algoritmos de ordenação para entender melhor conceitos como complexidade algorítmica, estruturas de dados e eficiência computacional.</p><h3 id="2-3-Modelagem-Matematica"><a href="#2-3-Modelagem-Matematica" class="headerlink" title="2.3 Modelagem Matemática:"></a>2.3 Modelagem Matemática:</h3><p>Em aplicações práticas que envolvem grandes volumes de dados numéricos (por exemplo, na resolução de equações diferenciais, métodos numéricos para integração, etc.), é comum precisar ordenar conjuntos de dados para processamento eficiente.</p><h3 id="2-4-Simulacoes-Cientificas"><a href="#2-4-Simulacoes-Cientificas" class="headerlink" title="2.4 Simulações Científicas:"></a>2.4 Simulações Científicas:</h3><p>Em simulações computacionais em ciências (como física, biologia, engenharia), algoritmos de ordenação são úteis para organizar e analisar grandes quantidades de dados gerados por modelos matemáticos.</p><h2 id="3-Compreensao-da-Eficiencia-de-Algoritmos-de-Ordenacao"><a href="#3-Compreensao-da-Eficiencia-de-Algoritmos-de-Ordenacao" class="headerlink" title="3. Compreensão da Eficiência de Algoritmos de Ordenação"></a>3. Compreensão da Eficiência de Algoritmos de Ordenação</h2><p>O Bubble Sort é um dos algoritmos de ordenação mais simples, porém menos eficientes em termos de tempo de execução quando comparado a outros como o Merge Sort ou o Quick Sort. Utilizando este código podemos:</p><h3 id="3-1-Comparar-Complexidade"><a href="#3-1-Comparar-Complexidade" class="headerlink" title="3.1 Comparar Complexidade"></a>3.1 Comparar Complexidade</h3><p>Implementar e analisar o Bubble Sort ajuda os alunos a entenderem como diferentes algoritmos de ordenação se comportam em termos de tempo de execução, especialmente à medida que o tamanho dos dados aumenta.</p><h3 id="3-2-Discutir-Trade-offs"><a href="#3-2-Discutir-Trade-offs" class="headerlink" title="3.2 Discutir Trade-offs"></a>3.2 Discutir Trade-offs</h3><p>Discutir os trade-offs entre simplicidade de implementação e eficiência de tempo é fundamental para entender por que certos algoritmos são preferidos em aplicações práticas sobre outros.</p><h2 id="4-Implementacao-e-Analise-de-Algoritmos"><a href="#4-Implementacao-e-Analise-de-Algoritmos" class="headerlink" title="4. Implementação e Análise de Algoritmos"></a>4. Implementação e Análise de Algoritmos</h2><p>Ao implementar o Bubble Sort e compará-lo com outros algoritmos, podemos:</p><h3 id="4-1-Examinar-Limitacoes"><a href="#4-1-Examinar-Limitacoes" class="headerlink" title="4.1 Examinar Limitações"></a>4.1 Examinar Limitações</h3><p>O Bubble Sort é ineficiente para grandes conjuntos de dados. Isso leva os alunos a explorarem suas limitações e a refletirem sobre como essas limitações podem afetar a escolha do algoritmo em contextos práticos.</p><h3 id="4-2-Analisar-Melhorias"><a href="#4-2-Analisar-Melhorias" class="headerlink" title="4.2 Analisar Melhorias"></a>4.2 Analisar Melhorias</h3><p>Discutir melhorias possíveis no Bubble Sort (como a otimização para parar quando o array estiver ordenado) pode levar a uma compreensão mais profunda das estratégias de otimização de algoritmos.</p><h2 id="5-Aplicacoes-em-Metodos-Numericos-e-Modelagem-Matematica"><a href="#5-Aplicacoes-em-Metodos-Numericos-e-Modelagem-Matematica" class="headerlink" title="5. Aplicações em Métodos Numéricos e Modelagem Matemática"></a>5. Aplicações em Métodos Numéricos e Modelagem Matemática</h2><p>Em aplicações de métodos numéricos e modelagem matemática, onde a ordenação de dados é frequentemente necessária:</p><h3 id="5-1-Integracao-com-Metodos-Numericos"><a href="#5-1-Integracao-com-Metodos-Numericos" class="headerlink" title="5.1 Integração com Métodos Numéricos"></a>5.1 Integração com Métodos Numéricos</h3><p>Entender como e quando ordenar dados pode ser crucial para a precisão e eficiência de métodos numéricos, como a resolução de equações diferenciais ou a integração numérica.</p><h3 id="5-2-Simulacoes-Cientificas"><a href="#5-2-Simulacoes-Cientificas" class="headerlink" title="5.2 Simulações Científicas"></a>5.2 Simulações Científicas</h3><p>Em ciências naturais e engenharia, simulações computacionais frequentemente envolvem a ordenação de grandes volumes de dados gerados por modelos matemáticos. Conhecer e implementar algoritmos de ordenação ajuda a lidar com esses desafios de maneira eficiente.</p><h2 id="6-Analise-de-Desempenho-e-Benchmarking"><a href="#6-Analise-de-Desempenho-e-Benchmarking" class="headerlink" title="6. Análise de Desempenho e Benchmarking"></a>6. Análise de Desempenho e Benchmarking</h2><p>Medição de Tempo: A medição precisa do tempo de execução (como feito no código fornecido) é essencial para comparar a eficiência de diferentes algoritmos. Isso prepara os alunos para a análise de desempenho em situações reais onde a eficiência computacional é crítica.</p><h2 id="7-Desenvolvimento-de-Habilidades-de-Programacao-e-Depuracao"><a href="#7-Desenvolvimento-de-Habilidades-de-Programacao-e-Depuracao" class="headerlink" title="7. Desenvolvimento de Habilidades de Programação e Depuração"></a>7. Desenvolvimento de Habilidades de Programação e Depuração</h2><p>Implementação e Depuração: Implementar o Bubble Sort e resolver eventuais problemas que surjam durante a implementação (como erros de lógica ou eficiência) ajuda os alunos a desenvolverem habilidades valiosas de programação e depuração.</p><p>A tabela na imagem apresenta os tempos de execução do algoritmo Bubble Sort para diferentes quantidades de dados. Os dados foram obtidos através de uma simulação computacional, onde o algoritmo foi executado várias vezes com cada quantidade de dados.</p><img src="/Tarefa_Calculo/2024/06/18/BubbleSort/bubble.png" class=""><p>Clique <a href="https://docs.google.com/spreadsheets/d/1Dr9dI_5-JOhWOhHmyAupBB079QXvYXREuRlSswNGwN8/edit?usp=sharing">Aqui</a> para acessar a tabela!</p><p>Para obter os dados da tabela, o algoritmo Bubble Sort foi executado várias vezes com cada quantidade de dados. O tempo de execução do algoritmo foi medido para cada execução e os resultados foram armazenados na tabela.</p><h2 id="8-Analise-dos-Dados"><a href="#8-Analise-dos-Dados" class="headerlink" title="8. Análise dos Dados"></a>8. Análise dos Dados</h2><p>A tabela mostra que o tempo de execução do algoritmo Bubble Sort aumenta significativamente com o número de dados. Isso ocorre porque o algoritmo Bubble Sort é um algoritmo de ordenação quadrático.A busca binária pode ser utilizada para otimizar o algoritmo Bubble Sort. Ao utilizar a busca binária para encontrar o maior elemento da lista em cada iteração do algoritmo, o tempo de execução do algoritmo pode ser reduzido significativamente.</p><h2 id="Conclusao"><a href="#Conclusao" class="headerlink" title="Conclusão"></a>Conclusão</h2><p>Os dados da tabela mostram que o tempo de execução do algoritmo Bubble Sort aumenta significativamente com o número de dados. Isso ocorre porque o algoritmo Bubble Sort é um algoritmo de ordenação quadrático. A busca binária pode ser utilizada para otimizar o algoritmo Bubble Sort e reduzir seu tempo de execução.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bubble-Sort&quot;&gt;&lt;a href=&quot;#Bubble-Sort&quot; class=&quot;headerlink&quot; title=&quot;Bubble Sort&quot;&gt;&lt;/a&gt;Bubble Sort&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tarefa de Calculo</title>
    <link href="https://jefersonnakayama.github.io/2024/05/11/Tarefas-de-Calculo/"/>
    <id>https://jefersonnakayama.github.io/2024/05/11/Tarefas-de-Calculo/</id>
    <published>2024-05-11T19:30:16.000Z</published>
    <updated>2024-06-16T17:20:04.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implementando-um-algoritmo"><a href="#Implementando-um-algoritmo" class="headerlink" title="Implementando um algoritmo"></a>Implementando um algoritmo</h2><h3 id="Enunciado-e-Requesitos"><a href="#Enunciado-e-Requesitos" class="headerlink" title="Enunciado e Requesitos"></a>Enunciado e Requesitos</h3><p>Essa é uma tarefa individual e tem valor 20 final de pontos, para isso:<br>-Crie um portfólio pessoal para seus projetos (se vc já tiver um, poste as tarefas em uma aba de tarefas de cálculo) usando a plataforma Hexo;<br>-Poste o link do seu portfólio;<br>-Implemente um algoritmo eficiente para realizar a ordenação,usar: </p><ul><li>Bubble Sort; </li><li>Selection Sort; </li><li>Insertion Sort; </li><li>Merge Sort.</li></ul><h4 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def bubble_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(0, n-i-1):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+1]:</span><br><span class="line">                arr[j], arr[j+1] = arr[j+1], arr[j]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    tamanho = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">    array = [random.randint(1, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(tamanho)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array original:&quot;</span>, array)</span><br><span class="line">    inicio = time.time()</span><br><span class="line">    bubble_sort(array)</span><br><span class="line">    fim = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, array)</span><br><span class="line">    tempo_execucao = fim - inicio</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;tempo_execucao:.9f&#125; segundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Selection-sort"><a href="#Selection-sort" class="headerlink" title="Selection sort"></a>Selection sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def selection_sort(arr):</span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + 1, n):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        try:</span><br><span class="line">            size = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">            <span class="keyword">if</span> size &gt; 0:</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Por favor, insira um número inteiro positivo.&quot;</span>)</span><br><span class="line">        except ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Entrada inválida. Por favor, insira um número inteiro.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    arr = [random.randint(1, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array gerado:&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line">    start_time = time.perf_counter()</span><br><span class="line">    selection_sort(arr)</span><br><span class="line">    end_time = time.perf_counter()</span><br><span class="line">    execution_time = end_time - start_time</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;execution_time:.9f&#125; segundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def insertion_sort(arr):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1, len(arr)):</span><br><span class="line">        key = arr[i]</span><br><span class="line">        j = i - 1</span><br><span class="line">        <span class="keyword">while</span> j &gt;= 0 and key &lt; arr[j]:</span><br><span class="line">            arr(j + 1) = arr[j]</span><br><span class="line">            j -= 1</span><br><span class="line">        arr(j + 1) = key</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        n = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line">        arr = [random.randint(0, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Array gerado:&quot;</span>, arr)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        insertion_sort(arr)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = end_time - start_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;execution_time:.9f&#125; segundos&quot;</span>)</span><br><span class="line">    except ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Por favor, insira um número inteiro válido.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def merge_sort(arr):</span><br><span class="line">    <span class="keyword">if</span> len(arr) &gt; 1:</span><br><span class="line">        mid = len(arr) // 2</span><br><span class="line">        L = arr[:mid]</span><br><span class="line">        R = arr[mid:]</span><br><span class="line"></span><br><span class="line">        merge_sort(L)</span><br><span class="line">        merge_sort(R)</span><br><span class="line"></span><br><span class="line">        i = j = k = 0</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(L) and j &lt; len(R):</span><br><span class="line">            <span class="keyword">if</span> L[i] &lt; R[j]:</span><br><span class="line">                arr[k] = L[i]</span><br><span class="line">                i += 1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                arr[k] = R[j]</span><br><span class="line">                j += 1</span><br><span class="line">            k += 1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(L):</span><br><span class="line">            arr[k] = L[i]</span><br><span class="line">            i += 1</span><br><span class="line">            k += 1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &lt; len(R):</span><br><span class="line">            arr[k] = R[j]</span><br><span class="line">            j += 1</span><br><span class="line">            k += 1</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    n = int(input(<span class="string">&quot;Digite o tamanho do array: &quot;</span>))</span><br><span class="line"></span><br><span class="line">    arr = [random.randint(0, 1000) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array original:&quot;</span>, arr)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    merge_sort(arr)</span><br><span class="line">    end_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Array ordenado:&quot;</span>, arr)</span><br><span class="line">    <span class="built_in">print</span>(f<span class="string">&quot;Tempo de execução: &#123;end_time - start_time:.6f&#125; segundos&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Implementando-um-algoritmo&quot;&gt;&lt;a href=&quot;#Implementando-um-algoritmo&quot; class=&quot;headerlink&quot; title=&quot;Implementando um algoritmo&quot;&gt;&lt;/a&gt;Implemen</summary>
      
    
    
    
    
  </entry>
  
</feed>
